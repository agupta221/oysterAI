rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {
    // Default rule - require authentication for all operations
    match /{allPaths=**} {
      allow read, write: if request.auth != null;
    }
    
    // Specific rule for explanations folder
    match /explanations/{userId}/{courseId}/{topicId}/{filename} {
      // Allow users to read their own explanations
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow the application to write explanations for any user
      // This is needed for your API endpoint
      allow write: if request.auth != null;
    }
    
    // Public explanations folder - accessible from server-side API routes
    match /public-explanations/{userId}/{courseId}/{topicId}/{filename} {
      // Allow read access to anyone
      allow read: if true;
      
      // Allow write access from server-side API routes
      // Since we can't authenticate from server-side, we'll allow all writes
      // This is a security trade-off, but the path includes user IDs to prevent conflicts
      allow write: if true;
      
      // Allow metadata access
      allow get, list: if true;
    }
    
    // New rule for question-specific explanations
    match /public-explanations/{userId}/{courseId}/{topicId}/questions/{questionId}/{filename} {
      // Allow read access to anyone
      allow read: if true;
      
      // Allow write access from server-side API routes
      allow write: if true;
      
      // Allow metadata access
      allow get, list: if true;
    }
  }
}
